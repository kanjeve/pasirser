"use strict";
// Generated from c:/Users/kaAAA/pasirser/test.g4 by ANTLR 4.13.1
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.testLexer = void 0;
const antlr = __importStar(require("antlr4ng"));
class testLexer extends antlr.Lexer {
    constructor(input) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, testLexer._ATN, testLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }
    get grammarFileName() { return "test.g4"; }
    get literalNames() { return testLexer.literalNames; }
    get symbolicNames() { return testLexer.symbolicNames; }
    get ruleNames() { return testLexer.ruleNames; }
    get serializedATN() { return testLexer._serializedATN; }
    get channelNames() { return testLexer.channelNames; }
    get modeNames() { return testLexer.modeNames; }
    static get _ATN() {
        if (!testLexer.__ATN) {
            testLexer.__ATN = new antlr.ATNDeserializer().deserialize(testLexer._serializedATN);
        }
        return testLexer.__ATN;
    }
    get vocabulary() {
        return testLexer.vocabulary;
    }
}
exports.testLexer = testLexer;
testLexer.COLON2 = 1;
testLexer.INC = 2;
testLexer.DEC = 3;
testLexer.PLUSEQ = 4;
testLexer.MINUSEQ = 5;
testLexer.MULTEQ = 6;
testLexer.DIVEQ = 7;
testLexer.SUREQ = 8;
testLexer.POWEREQ = 9;
testLexer.ARROW = 10;
testLexer.EQ = 11;
testLexer.NEQ = 12;
testLexer.LE = 13;
testLexer.GE = 14;
testLexer.LT = 15;
testLexer.GT = 16;
testLexer.AND = 17;
testLexer.OR = 18;
testLexer.NOT = 19;
testLexer.PLUS = 20;
testLexer.MINUS = 21;
testLexer.MULT = 22;
testLexer.DIV = 23;
testLexer.SUR = 24;
testLexer.POWER = 25;
testLexer.ASSIGN = 26;
testLexer.LPAREN = 27;
testLexer.RPAREN = 28;
testLexer.LBRANCE = 29;
testLexer.RBRANCE = 30;
testLexer.LBRACKET = 31;
testLexer.RBRACKET = 32;
testLexer.QUESTION = 33;
testLexer.COLON = 34;
testLexer.SEMI = 35;
testLexer.DOLLAR = 36;
testLexer.COMMA = 37;
testLexer.FLOAT = 38;
testLexer.INT = 39;
testLexer.EXP = 40;
testLexer.POINT = 41;
testLexer.IMAGINARY = 42;
testLexer.PI = 43;
testLexer.NAPIER = 44;
testLexer.BEFORE = 45;
testLexer.BEFORE_N = 46;
testLexer.QE_1 = 47;
testLexer.QE_2 = 48;
testLexer.QE_3 = 49;
testLexer.QE_4 = 50;
testLexer.QE_5 = 51;
testLexer.QE_6 = 52;
testLexer.QE_7 = 53;
testLexer.DEF = 54;
testLexer.IF = 55;
testLexer.FOR = 56;
testLexer.WHILE = 57;
testLexer.DO = 58;
testLexer.ELSE = 59;
testLexer.RETURN = 60;
testLexer.CONTINUE = 61;
testLexer.BREAK = 62;
testLexer.STRUCT = 63;
testLexer.MODULE = 64;
testLexer.ENDMODULE = 65;
testLexer.EXTERN = 66;
testLexer.STATIC = 67;
testLexer.GLOBAL = 68;
testLexer.LOCAL = 69;
testLexer.LOCALF = 70;
testLexer.VAR_2 = 71;
testLexer.FUNC_ID = 72;
testLexer.VAR_ID = 73;
testLexer.NEWLINE = 74;
testLexer.WS = 75;
testLexer.COMMENT = 76;
testLexer.STRING2 = 77;
testLexer.STRING1 = 78;
testLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
];
testLexer.literalNames = [
    null, "'::'", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", "'%='",
    "'^='", "'->'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", "'&&'",
    "'||'", "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'='",
    "'('", "')'", "'{'", "'}'", "'['", "']'", "'?'", "':'", "';'", "'$'",
    "','", null, null, null, "'.'", "'@i'", "'@pi'", "'@e'", "'@@'",
    "'@n'", "'@>'", "'@<'", "'@>='", "'@<='", "'@=='", "'@&&'", "'@||'",
    "'def'", "'if'", "'for'", "'while'", "'do'", "'else'", "'return'",
    "'continue'", "'break'", "'struct'", "'module'", "'endmodule'",
    "'extern'", "'static'", "'global'", "'local'", "'localf'", "'@'",
    null, null, "'\\n'"
];
testLexer.symbolicNames = [
    null, "COLON2", "INC", "DEC", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ",
    "SUREQ", "POWEREQ", "ARROW", "EQ", "NEQ", "LE", "GE", "LT", "GT",
    "AND", "OR", "NOT", "PLUS", "MINUS", "MULT", "DIV", "SUR", "POWER",
    "ASSIGN", "LPAREN", "RPAREN", "LBRANCE", "RBRANCE", "LBRACKET",
    "RBRACKET", "QUESTION", "COLON", "SEMI", "DOLLAR", "COMMA", "FLOAT",
    "INT", "EXP", "POINT", "IMAGINARY", "PI", "NAPIER", "BEFORE", "BEFORE_N",
    "QE_1", "QE_2", "QE_3", "QE_4", "QE_5", "QE_6", "QE_7", "DEF", "IF",
    "FOR", "WHILE", "DO", "ELSE", "RETURN", "CONTINUE", "BREAK", "STRUCT",
    "MODULE", "ENDMODULE", "EXTERN", "STATIC", "GLOBAL", "LOCAL", "LOCALF",
    "VAR_2", "FUNC_ID", "VAR_ID", "NEWLINE", "WS", "COMMENT", "STRING2",
    "STRING1"
];
testLexer.modeNames = [
    "DEFAULT_MODE",
];
testLexer.ruleNames = [
    "COLON2", "INC", "DEC", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ",
    "SUREQ", "POWEREQ", "ARROW", "EQ", "NEQ", "LE", "GE", "LT", "GT",
    "AND", "OR", "NOT", "PLUS", "MINUS", "MULT", "DIV", "SUR", "POWER",
    "ASSIGN", "LPAREN", "RPAREN", "LBRANCE", "RBRANCE", "LBRACKET",
    "RBRACKET", "QUESTION", "COLON", "SEMI", "DOLLAR", "COMMA", "FLOAT",
    "INT", "EXP", "POINT", "IMAGINARY", "PI", "NAPIER", "BEFORE", "BEFORE_N",
    "QE_1", "QE_2", "QE_3", "QE_4", "QE_5", "QE_6", "QE_7", "DEF", "IF",
    "FOR", "WHILE", "DO", "ELSE", "RETURN", "CONTINUE", "BREAK", "STRUCT",
    "MODULE", "ENDMODULE", "EXTERN", "STATIC", "GLOBAL", "LOCAL", "LOCALF",
    "VAR_2", "FUNC_ID", "VAR_ID", "NEWLINE", "WS", "COMMENT", "STRING2",
    "STRING1", "EscapeSequence", "OCTAL_BYTE_ESCAPE",
];
testLexer._serializedATN = [
    4, 0, 78, 501, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5,
    2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2,
    13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7,
    19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
    26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7,
    32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2,
    39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7,
    45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
    52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7,
    58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2,
    65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7,
    71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2,
    78, 7, 78, 2, 79, 7, 79, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1,
    3, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1,
    9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13,
    1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18,
    1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25,
    1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31,
    1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 4, 37, 253,
    8, 37, 11, 37, 12, 37, 254, 1, 37, 1, 37, 4, 37, 259, 8, 37, 11, 37, 12, 37, 260, 1, 38,
    4, 38, 264, 8, 38, 11, 38, 12, 38, 265, 1, 39, 1, 39, 3, 39, 270, 8, 39, 1, 39, 5, 39,
    273, 8, 39, 10, 39, 12, 39, 276, 9, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42,
    1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46,
    1, 46, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50,
    1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53,
    1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56,
    1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59,
    1, 59, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60,
    1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62,
    1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64,
    1, 64, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66,
    1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 68,
    1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70,
    1, 70, 1, 71, 1, 71, 5, 71, 431, 8, 71, 10, 71, 12, 71, 434, 9, 71, 1, 72, 1, 72, 5, 72,
    438, 8, 72, 10, 72, 12, 72, 441, 9, 72, 1, 73, 1, 73, 1, 73, 1, 73, 1, 74, 4, 74, 448,
    8, 74, 11, 74, 12, 74, 449, 1, 74, 1, 74, 1, 75, 1, 75, 1, 75, 1, 75, 5, 75, 458, 8, 75,
    10, 75, 12, 75, 461, 9, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 76, 1, 76, 1, 76, 5, 76,
    471, 8, 76, 10, 76, 12, 76, 474, 9, 76, 1, 76, 1, 76, 1, 77, 1, 77, 1, 77, 5, 77, 481,
    8, 77, 10, 77, 12, 77, 484, 9, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 1, 78, 3, 78, 492,
    8, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 3, 79, 500, 8, 79, 1, 459, 0, 80, 1, 1,
    3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14,
    29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25,
    51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36,
    73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47,
    95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113,
    57, 115, 58, 117, 59, 119, 60, 121, 61, 123, 62, 125, 63, 127, 64, 129, 65, 131, 66,
    133, 67, 135, 68, 137, 69, 139, 70, 141, 71, 143, 72, 145, 73, 147, 74, 149, 75, 151,
    76, 153, 77, 155, 78, 157, 0, 159, 0, 1, 0, 10, 1, 0, 48, 57, 2, 0, 69, 69, 101, 101,
    2, 0, 43, 43, 45, 45, 1, 0, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 1, 0, 65, 90,
    2, 0, 9, 9, 32, 32, 4, 0, 10, 10, 13, 13, 34, 34, 92, 92, 8, 0, 34, 34, 39, 39, 48, 48,
    63, 63, 92, 92, 110, 110, 114, 114, 116, 116, 1, 0, 48, 55, 515, 0, 1, 1, 0, 0, 0, 0,
    3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13,
    1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23,
    1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33,
    1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43,
    1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53,
    1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63,
    1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73,
    1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83,
    1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93,
    1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103,
    1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0,
    0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 121, 1,
    0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0, 0, 0, 0, 127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 0,
    131, 1, 0, 0, 0, 0, 133, 1, 0, 0, 0, 0, 135, 1, 0, 0, 0, 0, 137, 1, 0, 0, 0, 0, 139, 1, 0,
    0, 0, 0, 141, 1, 0, 0, 0, 0, 143, 1, 0, 0, 0, 0, 145, 1, 0, 0, 0, 0, 147, 1, 0, 0, 0, 0, 149,
    1, 0, 0, 0, 0, 151, 1, 0, 0, 0, 0, 153, 1, 0, 0, 0, 0, 155, 1, 0, 0, 0, 1, 161, 1, 0, 0, 0,
    3, 164, 1, 0, 0, 0, 5, 167, 1, 0, 0, 0, 7, 170, 1, 0, 0, 0, 9, 173, 1, 0, 0, 0, 11, 176, 1,
    0, 0, 0, 13, 179, 1, 0, 0, 0, 15, 182, 1, 0, 0, 0, 17, 185, 1, 0, 0, 0, 19, 188, 1, 0, 0,
    0, 21, 191, 1, 0, 0, 0, 23, 194, 1, 0, 0, 0, 25, 197, 1, 0, 0, 0, 27, 200, 1, 0, 0, 0, 29,
    203, 1, 0, 0, 0, 31, 205, 1, 0, 0, 0, 33, 207, 1, 0, 0, 0, 35, 210, 1, 0, 0, 0, 37, 213,
    1, 0, 0, 0, 39, 215, 1, 0, 0, 0, 41, 217, 1, 0, 0, 0, 43, 219, 1, 0, 0, 0, 45, 221, 1, 0,
    0, 0, 47, 223, 1, 0, 0, 0, 49, 225, 1, 0, 0, 0, 51, 227, 1, 0, 0, 0, 53, 229, 1, 0, 0, 0,
    55, 231, 1, 0, 0, 0, 57, 233, 1, 0, 0, 0, 59, 235, 1, 0, 0, 0, 61, 237, 1, 0, 0, 0, 63, 239,
    1, 0, 0, 0, 65, 241, 1, 0, 0, 0, 67, 243, 1, 0, 0, 0, 69, 245, 1, 0, 0, 0, 71, 247, 1, 0,
    0, 0, 73, 249, 1, 0, 0, 0, 75, 252, 1, 0, 0, 0, 77, 263, 1, 0, 0, 0, 79, 267, 1, 0, 0, 0,
    81, 277, 1, 0, 0, 0, 83, 279, 1, 0, 0, 0, 85, 282, 1, 0, 0, 0, 87, 286, 1, 0, 0, 0, 89, 289,
    1, 0, 0, 0, 91, 292, 1, 0, 0, 0, 93, 295, 1, 0, 0, 0, 95, 298, 1, 0, 0, 0, 97, 301, 1, 0,
    0, 0, 99, 305, 1, 0, 0, 0, 101, 309, 1, 0, 0, 0, 103, 313, 1, 0, 0, 0, 105, 317, 1, 0, 0,
    0, 107, 321, 1, 0, 0, 0, 109, 325, 1, 0, 0, 0, 111, 328, 1, 0, 0, 0, 113, 332, 1, 0, 0,
    0, 115, 338, 1, 0, 0, 0, 117, 341, 1, 0, 0, 0, 119, 346, 1, 0, 0, 0, 121, 353, 1, 0, 0,
    0, 123, 362, 1, 0, 0, 0, 125, 368, 1, 0, 0, 0, 127, 375, 1, 0, 0, 0, 129, 382, 1, 0, 0,
    0, 131, 392, 1, 0, 0, 0, 133, 399, 1, 0, 0, 0, 135, 406, 1, 0, 0, 0, 137, 413, 1, 0, 0,
    0, 139, 419, 1, 0, 0, 0, 141, 426, 1, 0, 0, 0, 143, 428, 1, 0, 0, 0, 145, 435, 1, 0, 0,
    0, 147, 442, 1, 0, 0, 0, 149, 447, 1, 0, 0, 0, 151, 453, 1, 0, 0, 0, 153, 467, 1, 0, 0,
    0, 155, 477, 1, 0, 0, 0, 157, 487, 1, 0, 0, 0, 159, 499, 1, 0, 0, 0, 161, 162, 5, 58, 0,
    0, 162, 163, 5, 58, 0, 0, 163, 2, 1, 0, 0, 0, 164, 165, 5, 43, 0, 0, 165, 166, 5, 43, 0,
    0, 166, 4, 1, 0, 0, 0, 167, 168, 5, 45, 0, 0, 168, 169, 5, 45, 0, 0, 169, 6, 1, 0, 0, 0,
    170, 171, 5, 43, 0, 0, 171, 172, 5, 61, 0, 0, 172, 8, 1, 0, 0, 0, 173, 174, 5, 45, 0, 0,
    174, 175, 5, 61, 0, 0, 175, 10, 1, 0, 0, 0, 176, 177, 5, 42, 0, 0, 177, 178, 5, 61, 0,
    0, 178, 12, 1, 0, 0, 0, 179, 180, 5, 47, 0, 0, 180, 181, 5, 61, 0, 0, 181, 14, 1, 0, 0,
    0, 182, 183, 5, 37, 0, 0, 183, 184, 5, 61, 0, 0, 184, 16, 1, 0, 0, 0, 185, 186, 5, 94,
    0, 0, 186, 187, 5, 61, 0, 0, 187, 18, 1, 0, 0, 0, 188, 189, 5, 45, 0, 0, 189, 190, 5, 62,
    0, 0, 190, 20, 1, 0, 0, 0, 191, 192, 5, 61, 0, 0, 192, 193, 5, 61, 0, 0, 193, 22, 1, 0,
    0, 0, 194, 195, 5, 33, 0, 0, 195, 196, 5, 61, 0, 0, 196, 24, 1, 0, 0, 0, 197, 198, 5, 60,
    0, 0, 198, 199, 5, 61, 0, 0, 199, 26, 1, 0, 0, 0, 200, 201, 5, 62, 0, 0, 201, 202, 5, 61,
    0, 0, 202, 28, 1, 0, 0, 0, 203, 204, 5, 60, 0, 0, 204, 30, 1, 0, 0, 0, 205, 206, 5, 62,
    0, 0, 206, 32, 1, 0, 0, 0, 207, 208, 5, 38, 0, 0, 208, 209, 5, 38, 0, 0, 209, 34, 1, 0,
    0, 0, 210, 211, 5, 124, 0, 0, 211, 212, 5, 124, 0, 0, 212, 36, 1, 0, 0, 0, 213, 214, 5,
    33, 0, 0, 214, 38, 1, 0, 0, 0, 215, 216, 5, 43, 0, 0, 216, 40, 1, 0, 0, 0, 217, 218, 5,
    45, 0, 0, 218, 42, 1, 0, 0, 0, 219, 220, 5, 42, 0, 0, 220, 44, 1, 0, 0, 0, 221, 222, 5,
    47, 0, 0, 222, 46, 1, 0, 0, 0, 223, 224, 5, 37, 0, 0, 224, 48, 1, 0, 0, 0, 225, 226, 5,
    94, 0, 0, 226, 50, 1, 0, 0, 0, 227, 228, 5, 61, 0, 0, 228, 52, 1, 0, 0, 0, 229, 230, 5,
    40, 0, 0, 230, 54, 1, 0, 0, 0, 231, 232, 5, 41, 0, 0, 232, 56, 1, 0, 0, 0, 233, 234, 5,
    123, 0, 0, 234, 58, 1, 0, 0, 0, 235, 236, 5, 125, 0, 0, 236, 60, 1, 0, 0, 0, 237, 238,
    5, 91, 0, 0, 238, 62, 1, 0, 0, 0, 239, 240, 5, 93, 0, 0, 240, 64, 1, 0, 0, 0, 241, 242,
    5, 63, 0, 0, 242, 66, 1, 0, 0, 0, 243, 244, 5, 58, 0, 0, 244, 68, 1, 0, 0, 0, 245, 246,
    5, 59, 0, 0, 246, 70, 1, 0, 0, 0, 247, 248, 5, 36, 0, 0, 248, 72, 1, 0, 0, 0, 249, 250,
    5, 44, 0, 0, 250, 74, 1, 0, 0, 0, 251, 253, 7, 0, 0, 0, 252, 251, 1, 0, 0, 0, 253, 254,
    1, 0, 0, 0, 254, 252, 1, 0, 0, 0, 254, 255, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 258,
    5, 46, 0, 0, 257, 259, 7, 0, 0, 0, 258, 257, 1, 0, 0, 0, 259, 260, 1, 0, 0, 0, 260, 258,
    1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 76, 1, 0, 0, 0, 262, 264, 7, 0, 0, 0, 263, 262, 1,
    0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 263, 1, 0, 0, 0, 265, 266, 1, 0, 0, 0, 266, 78, 1, 0,
    0, 0, 267, 269, 7, 1, 0, 0, 268, 270, 7, 2, 0, 0, 269, 268, 1, 0, 0, 0, 269, 270, 1, 0,
    0, 0, 270, 274, 1, 0, 0, 0, 271, 273, 7, 0, 0, 0, 272, 271, 1, 0, 0, 0, 273, 276, 1, 0,
    0, 0, 274, 272, 1, 0, 0, 0, 274, 275, 1, 0, 0, 0, 275, 80, 1, 0, 0, 0, 276, 274, 1, 0, 0,
    0, 277, 278, 5, 46, 0, 0, 278, 82, 1, 0, 0, 0, 279, 280, 5, 64, 0, 0, 280, 281, 5, 105,
    0, 0, 281, 84, 1, 0, 0, 0, 282, 283, 5, 64, 0, 0, 283, 284, 5, 112, 0, 0, 284, 285, 5,
    105, 0, 0, 285, 86, 1, 0, 0, 0, 286, 287, 5, 64, 0, 0, 287, 288, 5, 101, 0, 0, 288, 88,
    1, 0, 0, 0, 289, 290, 5, 64, 0, 0, 290, 291, 5, 64, 0, 0, 291, 90, 1, 0, 0, 0, 292, 293,
    5, 64, 0, 0, 293, 294, 5, 110, 0, 0, 294, 92, 1, 0, 0, 0, 295, 296, 5, 64, 0, 0, 296, 297,
    5, 62, 0, 0, 297, 94, 1, 0, 0, 0, 298, 299, 5, 64, 0, 0, 299, 300, 5, 60, 0, 0, 300, 96,
    1, 0, 0, 0, 301, 302, 5, 64, 0, 0, 302, 303, 5, 62, 0, 0, 303, 304, 5, 61, 0, 0, 304, 98,
    1, 0, 0, 0, 305, 306, 5, 64, 0, 0, 306, 307, 5, 60, 0, 0, 307, 308, 5, 61, 0, 0, 308, 100,
    1, 0, 0, 0, 309, 310, 5, 64, 0, 0, 310, 311, 5, 61, 0, 0, 311, 312, 5, 61, 0, 0, 312, 102,
    1, 0, 0, 0, 313, 314, 5, 64, 0, 0, 314, 315, 5, 38, 0, 0, 315, 316, 5, 38, 0, 0, 316, 104,
    1, 0, 0, 0, 317, 318, 5, 64, 0, 0, 318, 319, 5, 124, 0, 0, 319, 320, 5, 124, 0, 0, 320,
    106, 1, 0, 0, 0, 321, 322, 5, 100, 0, 0, 322, 323, 5, 101, 0, 0, 323, 324, 5, 102, 0,
    0, 324, 108, 1, 0, 0, 0, 325, 326, 5, 105, 0, 0, 326, 327, 5, 102, 0, 0, 327, 110, 1,
    0, 0, 0, 328, 329, 5, 102, 0, 0, 329, 330, 5, 111, 0, 0, 330, 331, 5, 114, 0, 0, 331,
    112, 1, 0, 0, 0, 332, 333, 5, 119, 0, 0, 333, 334, 5, 104, 0, 0, 334, 335, 5, 105, 0,
    0, 335, 336, 5, 108, 0, 0, 336, 337, 5, 101, 0, 0, 337, 114, 1, 0, 0, 0, 338, 339, 5,
    100, 0, 0, 339, 340, 5, 111, 0, 0, 340, 116, 1, 0, 0, 0, 341, 342, 5, 101, 0, 0, 342,
    343, 5, 108, 0, 0, 343, 344, 5, 115, 0, 0, 344, 345, 5, 101, 0, 0, 345, 118, 1, 0, 0,
    0, 346, 347, 5, 114, 0, 0, 347, 348, 5, 101, 0, 0, 348, 349, 5, 116, 0, 0, 349, 350,
    5, 117, 0, 0, 350, 351, 5, 114, 0, 0, 351, 352, 5, 110, 0, 0, 352, 120, 1, 0, 0, 0, 353,
    354, 5, 99, 0, 0, 354, 355, 5, 111, 0, 0, 355, 356, 5, 110, 0, 0, 356, 357, 5, 116, 0,
    0, 357, 358, 5, 105, 0, 0, 358, 359, 5, 110, 0, 0, 359, 360, 5, 117, 0, 0, 360, 361,
    5, 101, 0, 0, 361, 122, 1, 0, 0, 0, 362, 363, 5, 98, 0, 0, 363, 364, 5, 114, 0, 0, 364,
    365, 5, 101, 0, 0, 365, 366, 5, 97, 0, 0, 366, 367, 5, 107, 0, 0, 367, 124, 1, 0, 0, 0,
    368, 369, 5, 115, 0, 0, 369, 370, 5, 116, 0, 0, 370, 371, 5, 114, 0, 0, 371, 372, 5,
    117, 0, 0, 372, 373, 5, 99, 0, 0, 373, 374, 5, 116, 0, 0, 374, 126, 1, 0, 0, 0, 375, 376,
    5, 109, 0, 0, 376, 377, 5, 111, 0, 0, 377, 378, 5, 100, 0, 0, 378, 379, 5, 117, 0, 0,
    379, 380, 5, 108, 0, 0, 380, 381, 5, 101, 0, 0, 381, 128, 1, 0, 0, 0, 382, 383, 5, 101,
    0, 0, 383, 384, 5, 110, 0, 0, 384, 385, 5, 100, 0, 0, 385, 386, 5, 109, 0, 0, 386, 387,
    5, 111, 0, 0, 387, 388, 5, 100, 0, 0, 388, 389, 5, 117, 0, 0, 389, 390, 5, 108, 0, 0,
    390, 391, 5, 101, 0, 0, 391, 130, 1, 0, 0, 0, 392, 393, 5, 101, 0, 0, 393, 394, 5, 120,
    0, 0, 394, 395, 5, 116, 0, 0, 395, 396, 5, 101, 0, 0, 396, 397, 5, 114, 0, 0, 397, 398,
    5, 110, 0, 0, 398, 132, 1, 0, 0, 0, 399, 400, 5, 115, 0, 0, 400, 401, 5, 116, 0, 0, 401,
    402, 5, 97, 0, 0, 402, 403, 5, 116, 0, 0, 403, 404, 5, 105, 0, 0, 404, 405, 5, 99, 0,
    0, 405, 134, 1, 0, 0, 0, 406, 407, 5, 103, 0, 0, 407, 408, 5, 108, 0, 0, 408, 409, 5,
    111, 0, 0, 409, 410, 5, 98, 0, 0, 410, 411, 5, 97, 0, 0, 411, 412, 5, 108, 0, 0, 412,
    136, 1, 0, 0, 0, 413, 414, 5, 108, 0, 0, 414, 415, 5, 111, 0, 0, 415, 416, 5, 99, 0, 0,
    416, 417, 5, 97, 0, 0, 417, 418, 5, 108, 0, 0, 418, 138, 1, 0, 0, 0, 419, 420, 5, 108,
    0, 0, 420, 421, 5, 111, 0, 0, 421, 422, 5, 99, 0, 0, 422, 423, 5, 97, 0, 0, 423, 424,
    5, 108, 0, 0, 424, 425, 5, 102, 0, 0, 425, 140, 1, 0, 0, 0, 426, 427, 5, 64, 0, 0, 427,
    142, 1, 0, 0, 0, 428, 432, 7, 3, 0, 0, 429, 431, 7, 4, 0, 0, 430, 429, 1, 0, 0, 0, 431,
    434, 1, 0, 0, 0, 432, 430, 1, 0, 0, 0, 432, 433, 1, 0, 0, 0, 433, 144, 1, 0, 0, 0, 434,
    432, 1, 0, 0, 0, 435, 439, 7, 5, 0, 0, 436, 438, 7, 4, 0, 0, 437, 436, 1, 0, 0, 0, 438,
    441, 1, 0, 0, 0, 439, 437, 1, 0, 0, 0, 439, 440, 1, 0, 0, 0, 440, 146, 1, 0, 0, 0, 441,
    439, 1, 0, 0, 0, 442, 443, 5, 10, 0, 0, 443, 444, 1, 0, 0, 0, 444, 445, 6, 73, 0, 0, 445,
    148, 1, 0, 0, 0, 446, 448, 7, 6, 0, 0, 447, 446, 1, 0, 0, 0, 448, 449, 1, 0, 0, 0, 449,
    447, 1, 0, 0, 0, 449, 450, 1, 0, 0, 0, 450, 451, 1, 0, 0, 0, 451, 452, 6, 74, 0, 0, 452,
    150, 1, 0, 0, 0, 453, 454, 5, 47, 0, 0, 454, 455, 5, 42, 0, 0, 455, 459, 1, 0, 0, 0, 456,
    458, 9, 0, 0, 0, 457, 456, 1, 0, 0, 0, 458, 461, 1, 0, 0, 0, 459, 460, 1, 0, 0, 0, 459,
    457, 1, 0, 0, 0, 460, 462, 1, 0, 0, 0, 461, 459, 1, 0, 0, 0, 462, 463, 5, 42, 0, 0, 463,
    464, 5, 47, 0, 0, 464, 465, 1, 0, 0, 0, 465, 466, 6, 75, 0, 0, 466, 152, 1, 0, 0, 0, 467,
    472, 5, 34, 0, 0, 468, 471, 3, 157, 78, 0, 469, 471, 8, 7, 0, 0, 470, 468, 1, 0, 0, 0,
    470, 469, 1, 0, 0, 0, 471, 474, 1, 0, 0, 0, 472, 470, 1, 0, 0, 0, 472, 473, 1, 0, 0, 0,
    473, 475, 1, 0, 0, 0, 474, 472, 1, 0, 0, 0, 475, 476, 5, 34, 0, 0, 476, 154, 1, 0, 0, 0,
    477, 482, 5, 39, 0, 0, 478, 481, 3, 157, 78, 0, 479, 481, 8, 7, 0, 0, 480, 478, 1, 0,
    0, 0, 480, 479, 1, 0, 0, 0, 481, 484, 1, 0, 0, 0, 482, 480, 1, 0, 0, 0, 482, 483, 1, 0,
    0, 0, 483, 485, 1, 0, 0, 0, 484, 482, 1, 0, 0, 0, 485, 486, 5, 39, 0, 0, 486, 156, 1, 0,
    0, 0, 487, 491, 5, 92, 0, 0, 488, 492, 7, 8, 0, 0, 489, 492, 3, 159, 79, 0, 490, 492,
    9, 0, 0, 0, 491, 488, 1, 0, 0, 0, 491, 489, 1, 0, 0, 0, 491, 490, 1, 0, 0, 0, 492, 158,
    1, 0, 0, 0, 493, 494, 7, 9, 0, 0, 494, 495, 7, 9, 0, 0, 495, 500, 7, 9, 0, 0, 496, 497,
    7, 9, 0, 0, 497, 500, 7, 9, 0, 0, 498, 500, 7, 9, 0, 0, 499, 493, 1, 0, 0, 0, 499, 496,
    1, 0, 0, 0, 499, 498, 1, 0, 0, 0, 500, 160, 1, 0, 0, 0, 16, 0, 254, 260, 265, 269, 274,
    432, 439, 449, 459, 470, 472, 480, 482, 491, 499, 1, 6, 0, 0
];
testLexer.vocabulary = new antlr.Vocabulary(testLexer.literalNames, testLexer.symbolicNames, []);
testLexer.decisionsToDFA = testLexer._ATN.decisionToState.map((ds, index) => new antlr.DFA(ds, index));
//# sourceMappingURL=testLexer.js.map