import * as antlr from "antlr4ng";
export declare class testLexer extends antlr.Lexer {
    static readonly LTLT = 1;
    static readonly GTGT = 2;
    static readonly COLON2 = 3;
    static readonly INC = 4;
    static readonly DEC = 5;
    static readonly PLUSEQ = 6;
    static readonly MINUSEQ = 7;
    static readonly MULTEQ = 8;
    static readonly DIVEQ = 9;
    static readonly SUREQ = 10;
    static readonly POWEREQ = 11;
    static readonly ARROW = 12;
    static readonly EQ = 13;
    static readonly NEQ = 14;
    static readonly LE = 15;
    static readonly GE = 16;
    static readonly LT = 17;
    static readonly GT = 18;
    static readonly AND = 19;
    static readonly OR = 20;
    static readonly NOT = 21;
    static readonly PLUS = 22;
    static readonly MINUS = 23;
    static readonly MULT = 24;
    static readonly DIV = 25;
    static readonly SUR = 26;
    static readonly POWER = 27;
    static readonly ASSIGN = 28;
    static readonly BACK = 29;
    static readonly MID = 30;
    static readonly LPAREN = 31;
    static readonly RPAREN = 32;
    static readonly LBRANCE = 33;
    static readonly RBRANCE = 34;
    static readonly LBRACKET = 35;
    static readonly RBRACKET = 36;
    static readonly QUESTION = 37;
    static readonly COLON = 38;
    static readonly SEMI = 39;
    static readonly DOLLAR = 40;
    static readonly COMMA = 41;
    static readonly HEX = 42;
    static readonly BIT = 43;
    static readonly FLOAT = 44;
    static readonly EXP = 45;
    static readonly INT = 46;
    static readonly POINT = 47;
    static readonly IMAGINARY = 48;
    static readonly BEFORE = 49;
    static readonly BEFORE_N = 50;
    static readonly QE_1 = 51;
    static readonly QE_2 = 52;
    static readonly QE_3 = 53;
    static readonly QE_4 = 54;
    static readonly QE_5 = 55;
    static readonly QE_6 = 56;
    static readonly QE_7 = 57;
    static readonly QE_8 = 58;
    static readonly QE_9 = 59;
    static readonly QE_10 = 60;
    static readonly QE_11 = 61;
    static readonly QE_12 = 62;
    static readonly DEF = 63;
    static readonly IF = 64;
    static readonly FOR = 65;
    static readonly WHILE = 66;
    static readonly DO = 67;
    static readonly ELSE = 68;
    static readonly RETURN = 69;
    static readonly CONTINUE = 70;
    static readonly BREAK = 71;
    static readonly STRUCT = 72;
    static readonly MODULE = 73;
    static readonly ENDMODULE = 74;
    static readonly EXTERN = 75;
    static readonly STATIC = 76;
    static readonly GLOBAL = 77;
    static readonly LOCAL = 78;
    static readonly LOCALF = 79;
    static readonly ATFUNC = 80;
    static readonly VAR_2 = 81;
    static readonly FUNC_ID = 82;
    static readonly VAR_ID = 83;
    static readonly NEWLINE = 84;
    static readonly WS = 85;
    static readonly COMMENT = 86;
    static readonly PCOMMENT = 87;
    static readonly PIFDEF = 88;
    static readonly PIFNDEF = 89;
    static readonly PIF = 90;
    static readonly PELSE = 91;
    static readonly PELIF = 92;
    static readonly PENDIF = 93;
    static readonly PINCLUDE = 94;
    static readonly PDEFINE = 95;
    static readonly CHARPLUS = 96;
    static readonly CHAR = 97;
    static readonly STRING = 98;
    static readonly NOSTRING = 99;
    static readonly channelNames: string[];
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    constructor(input: antlr.CharStream);
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    get channelNames(): string[];
    get modeNames(): string[];
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): antlr.ATN;
    private static readonly vocabulary;
    get vocabulary(): antlr.Vocabulary;
    private static readonly decisionsToDFA;
}
