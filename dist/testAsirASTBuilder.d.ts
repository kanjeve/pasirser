import { AbstractParseTreeVisitor } from 'antlr4ng';
import { testVisitor } from './.antlr/testVisitor.js';
import * as ast from './testAst.js';
import { ProgContext, ExprStatementContext, EmptyLineStatementContext, AssignStatementContext, DefinitionStatementContext, IfStatementContext, ForStatementContext, WhileStatementContext, DoStatementContext, ReturnStatementContext, BreakStatementContext, ContinueStatementContext, StructStatementContext, ModuleStatementContext, DefContext, IfContext, ForiniContext, ForconContext, Forup1Context, Forup2Context, Forup3Context, Forup4Context, Forup5Context, ForContext, WhileContext, DoContext, ReturnContext, ContinueContext, BreakContext, StrctContext, FcallContext, ModuleAssignContext, ModuleFunctionContext, ModuleStartContext, ModuleEndContext, MainContext, TernaryContext, QEorContext, QEandContext, QECompareContext, OrContext, AndContext, CompareContext, AddSubContext, MulDivSurContext, UnaryMinusContext, NotExprContext, PowerExprRuleContext, PowerContext, IndexAccessContext, RealContext, IdExprContext, ParenContext, SpecNumContext, StringLiteralContext, CharLiteralContext, RatContext, FloatContext, RatNumContext, DecNumContext, VIdContext, FIdContext, V2IdContext, ImaContext, PiContext, NapContext, BefContext, BefNContext, ListExprContext, SentenceContext, Sentence1Context, AssignContext, StructAssignContext, ListAssignContext } from "./.antlr/testParser.js";
export declare class AsirASTBuilder extends AbstractParseTreeVisitor<ast.ASTNode | undefined> implements testVisitor<ast.ASTNode | undefined> {
    protected defaultResult(): ast.ASTNode | undefined;
    protected aggregateResult(aggregate: ast.ASTNode | undefined, nextResult: ast.ASTNode | undefined): ast.ASTNode | undefined;
    visitProg(ctx: ProgContext): ast.ProgramNode;
    visitExprStatement(ctx: ExprStatementContext): ast.ExpressionStatementNode;
    visitEmptyStatement(ctx: EmptyLineStatementContext): ast.EmptyStatementNode;
    visitAssignStatement(ctx: AssignStatementContext): ast.AssignmentStatementNode | ast.StructMemberAssignmentNode | ast.ListDestructuringAssignmentNode;
    visitAssign(ctx: AssignContext): ast.AssignmentStatementNode;
    visitStructAssign(ctx: StructAssignContext): ast.StructMemberAssignmentNode;
    visitListAssign(ctx: ListAssignContext): ast.ListDestructuringAssignmentNode;
    visitDefinitionStatement(ctx: DefinitionStatementContext): ast.DefinitionStatementNode;
    visitIfStatement(ctx: IfStatementContext): ast.IfStatementNode;
    visitIf(ctx: IfContext): ast.IfStatementNode;
    visitForStatement(ctx: ForStatementContext): ast.ForStatementNode;
    visitFor(ctx: ForContext): ast.ForStatementNode;
    visitForini(ctx: ForiniContext): ast.AssignmentStatementNode;
    visitForcon(ctx: ForconContext): ast.ExpressionNode;
    visitForup1(ctx: Forup1Context): ast.AssignmentStatementNode;
    visitForup2(ctx: Forup2Context): ast.UnaryOperationNode;
    visitForup3(ctx: Forup3Context): ast.UnaryOperationNode;
    visitForup4(ctx: Forup4Context): ast.UnaryOperationNode;
    visitForup5(ctx: Forup5Context): ast.UnaryOperationNode;
    visitWhileStatement(ctx: WhileStatementContext): ast.WhileStatementNode;
    visitDoStatement(ctx: DoStatementContext): ast.DoWhileStatementNode;
    visitReturnStatement(ctx: ReturnStatementContext): ast.ReturnStatementNode;
    visitBreakStatement(ctx: BreakStatementContext): ast.BreakStatementNode;
    visitContinueStatement(ctx: ContinueStatementContext): ast.ContinueStatementNode;
    visitStructStatement(ctx: StructStatementContext): ast.StructStatementNode;
    visitModuleStatement(ctx: ModuleStatementContext): ast.ModuleStatementNode;
    visitSentence(ctx: SentenceContext): ast.BlockNode;
    visitSentence1(ctx: Sentence1Context): ast.BlockNode;
    visitMain(ctx: MainContext): ast.ExpressionNode;
    visitTernary(ctx: TernaryContext): ast.TernaryOperationNode | ast.ExpressionNode;
    visitAddSub(ctx: AddSubContext): ast.ExpressionNode;
    visitMulDivSur(ctx: MulDivSurContext): ast.ExpressionNode;
    visitUnaryMinus(ctx: UnaryMinusContext): ast.UnaryOperationNode;
    visitNotExpr(ctx: NotExprContext): ast.UnaryOperationNode;
    visitPower(ctx: PowerContext): ast.PowerOperationNode | ast.ExpressionNode;
    visitPowerExprRule(ctx: PowerExprRuleContext): ast.ExpressionNode;
    visitIndexAccess(ctx: IndexAccessContext): ast.ExpressionNode;
    visitReal(ctx: RealContext): ast.NumberLiteralNode;
    visitRatNum(ctx: RatNumContext): ast.NumberLiteralNode;
    visitDecNum(ctx: DecNumContext): ast.NumberLiteralNode;
    visitRat(ctx: RatContext): ast.NumberLiteralNode;
    visitFloat(ctx: FloatContext): ast.NumberLiteralNode;
    visitIdExpr(ctx: IdExprContext): ast.IdentifierNode;
    visitVId(ctx: VIdContext): ast.IdentifierNode;
    visitFId(ctx: FIdContext): ast.IdentifierNode;
    visitV2Id(ctx: V2IdContext): ast.IdentifierNode;
    visitFcall(ctx: FcallContext): ast.FunctionCallNode;
    visitParen(ctx: ParenContext): ast.ParenExpressionNode;
    visitSpecNum(ctx: SpecNumContext): ast.SpecialNumberNode;
    visitIma(ctx: ImaContext): ast.SpecialNumberNode;
    visitPi(ctx: PiContext): ast.SpecialNumberNode;
    visitNap(ctx: NapContext): ast.SpecialNumberNode;
    visitBef(ctx: BefContext): ast.SpecialNumberNode;
    visitBefN(ctx: BefNContext): ast.SpecialNumberNode;
    visitStringLiteral(ctx: StringLiteralContext): ast.StringLiteralNode;
    visitCharLiteral(ctx: CharLiteralContext): ast.CharLiteralNode;
    visitListExpr(ctx: ListExprContext): ast.ListLiteralNode;
    visitDef(ctx: DefContext): ast.DefinitionStatementNode;
    visitWhile(ctx: WhileContext): ast.WhileStatementNode;
    visitDo(ctx: DoContext): ast.DoWhileStatementNode;
    visitReturn(ctx: ReturnContext): ast.ReturnStatementNode;
    visitBreak(ctx: BreakContext): ast.BreakStatementNode;
    visitContinue(ctx: ContinueContext): ast.ContinueStatementNode;
    visitStrct(ctx: StrctContext): ast.StructStatementNode;
    visitModuleAssign(ctx: ModuleAssignContext): ast.ModuleVariableDeclarationNode;
    visitModuleFunction(ctx: ModuleFunctionContext): ast.LocalFunctionDeclarationNode;
    visitModuleStart(ctx: ModuleStartContext): ast.ModuleDeclarationNode;
    visitModuleEnd(ctx: ModuleEndContext): ast.EndModuleNode;
    private visitBinaryOp;
    visitQEor(ctx: QEorContext): ast.ExpressionNode;
    visitQEand(ctx: QEandContext): ast.ExpressionNode;
    visitQECompare(ctx: QECompareContext): ast.ExpressionNode;
    visitOr(ctx: OrContext): ast.ExpressionNode;
    visitAnd(ctx: AndContext): ast.ExpressionNode;
    visitCompare(ctx: CompareContext): ast.ExpressionNode;
}
