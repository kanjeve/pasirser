import { AbstractParseTreeVisitor } from 'antlr4ng';
import { testVisitor } from './.antlr/testVisitor.js';
import * as ast from './testAst.js';
import { ProgContext } from "./.antlr/testParser.js";
import { ExprStatementContext } from "./.antlr/testParser.js";
import { EmptyLineStatementContext } from "./.antlr/testParser.js";
import { AssignStatementContext } from "./.antlr/testParser.js";
import { IfStatementContext } from "./.antlr/testParser.js";
import { ForStatementContext } from "./.antlr/testParser.js";
import { IfContext } from "./.antlr/testParser.js";
import { ForiniContext } from "./.antlr/testParser.js";
import { ForconContext } from "./.antlr/testParser.js";
import { Forup1Context } from "./.antlr/testParser.js";
import { Forup2Context } from "./.antlr/testParser.js";
import { Forup3Context } from "./.antlr/testParser.js";
import { Forup4Context } from "./.antlr/testParser.js";
import { Forup5Context } from "./.antlr/testParser.js";
import { ForContext } from "./.antlr/testParser.js";
import { FcallContext } from "./.antlr/testParser.js";
import { TernaryContext } from "./.antlr/testParser.js";
import { AddSubContext } from "./.antlr/testParser.js";
import { MulDivSurContext } from "./.antlr/testParser.js";
import { UnaryMinusContext } from "./.antlr/testParser.js";
import { NotExprContext } from "./.antlr/testParser.js";
import { PowerExprRuleContext } from "./.antlr/testParser.js";
import { PowerContext } from "./.antlr/testParser.js";
import { IndexAccessContext } from "./.antlr/testParser.js";
import { RealContext } from "./.antlr/testParser.js";
import { IdExprContext } from "./.antlr/testParser.js";
import { ParenContext } from "./.antlr/testParser.js";
import { SpecNumContext } from "./.antlr/testParser.js";
import { StringLiteralContext } from "./.antlr/testParser.js";
import { CharLiteralContext } from "./.antlr/testParser.js";
import { PeriodContext } from "./.antlr/testParser.js";
import { FloatContext } from "./.antlr/testParser.js";
import { RatNumContext } from "./.antlr/testParser.js";
import { DecNumContext } from "./.antlr/testParser.js";
import { ZeroNumContext } from "./.antlr/testParser.js";
import { NatNumContext } from "./.antlr/testParser.js";
import { VIdContext } from "./.antlr/testParser.js";
import { FIdContext } from "./.antlr/testParser.js";
import { V2IdContext } from "./.antlr/testParser.js";
import { ImaContext } from "./.antlr/testParser.js";
import { PiContext } from "./.antlr/testParser.js";
import { NapContext } from "./.antlr/testParser.js";
import { BefContext } from "./.antlr/testParser.js";
import { BefNContext } from "./.antlr/testParser.js";
import { ListExprContext } from "./.antlr/testParser.js";
import { SentenceContext } from "./.antlr/testParser.js";
import { Sentence1Context } from "./.antlr/testParser.js";
import { AssignContext } from "./.antlr/testParser.js";
import { StructAssignContext } from "./.antlr/testParser.js";
import { ListAssignContext } from "./.antlr/testParser.js";
export declare class AsirASTBuilder extends AbstractParseTreeVisitor<ast.ASTNode | undefined> implements testVisitor<ast.ASTNode | undefined> {
    protected defaultResult(): ast.ASTNode | undefined;
    protected aggregateResult(aggregate: ast.ASTNode | undefined, nextResult: ast.ASTNode | undefined): ast.ASTNode | undefined;
    visitProg(ctx: ProgContext): ast.ProgramNode;
    visitExprStatement(ctx: ExprStatementContext): ast.ExpressionStatementNode;
    visitEmptyStatement(ctx: EmptyLineStatementContext): ast.EmptyStatementNode;
    visitAssignStatement(ctx: AssignStatementContext): ast.AssignmentStatementNode | ast.StructMemberAssignmentNode | ast.ListDestructuringAssignmentNode;
    visitAssign(ctx: AssignContext): ast.AssignmentStatementNode;
    visitStructAssign(ctx: StructAssignContext): ast.StructMemberAssignmentNode;
    visitListAssign(ctx: ListAssignContext): ast.ListDestructuringAssignmentNode;
    visitIfStatement(ctx: IfStatementContext): ast.IfStatementNode;
    visitIf(ctx: IfContext): ast.IfStatementNode;
    visitForStatement(ctx: ForStatementContext): ast.ForStatementNode;
    visitFor(ctx: ForContext): ast.ForStatementNode;
    visitForini(ctx: ForiniContext): ast.AssignmentStatementNode;
    visitForcon(ctx: ForconContext): ast.ExpressionNode;
    visitForup1(ctx: Forup1Context): ast.AssignmentStatementNode;
    visitForup2(ctx: Forup2Context): ast.UnaryOperationNode;
    visitForup3(ctx: Forup3Context): ast.UnaryOperationNode;
    visitForup4(ctx: Forup4Context): ast.UnaryOperationNode;
    visitForup5(ctx: Forup5Context): ast.UnaryOperationNode;
    visitSentence(ctx: SentenceContext): ast.BlockNode;
    visitSentence1(ctx: Sentence1Context): ast.BlockNode;
    visitTernary(ctx: TernaryContext): ast.TernaryOperationNode | ast.ExpressionNode;
    visitAddSub(ctx: AddSubContext): ast.BinaryOperationNode;
    visitMulDivSur(ctx: MulDivSurContext): ast.BinaryOperationNode;
    visitUnaryMinus(ctx: UnaryMinusContext): ast.UnaryOperationNode;
    visitNotExpr(ctx: NotExprContext): ast.UnaryOperationNode;
    visitPower(ctx: PowerContext): ast.PowerOperationNode | ast.ExpressionNode;
    visitPowerExprRule(ctx: PowerExprRuleContext): ast.ExpressionNode;
    visitIndexAccess(ctx: IndexAccessContext): ast.IndexAccessNode;
    visitReal(ctx: RealContext): ast.NumberLiteralNode;
    visitZeroNum(ctx: ZeroNumContext): ast.NumberLiteralNode;
    visitNatNum(ctx: NatNumContext): ast.NumberLiteralNode;
    visitRatNum(ctx: RatNumContext): ast.NumberLiteralNode;
    visitRat(ctx: RatNumContext): ast.NumberLiteralNode;
    visitDecNum(ctx: DecNumContext): ast.NumberLiteralNode;
    visitPeriod(ctx: PeriodContext): ast.NumberLiteralNode;
    visitFloat(ctx: FloatContext): ast.NumberLiteralNode;
    visitIdExpr(ctx: IdExprContext): ast.IdentifierNode;
    visitVId(ctx: VIdContext): ast.IdentifierNode;
    visitFId(ctx: FIdContext): ast.IdentifierNode;
    visitV2Id(ctx: V2IdContext): ast.IdentifierNode;
    visitFcall(ctx: FcallContext): ast.FunctionCallNode;
    visitParen(ctx: ParenContext): ast.ParenExpressionNode;
    visitIma(ctx: ImaContext): ast.SpecialNumberNode;
    visitPi(ctx: PiContext): ast.SpecialNumberNode;
    visitNap(ctx: NapContext): ast.SpecialNumberNode;
    visitBef(ctx: BefContext): ast.SpecialNumberNode;
    visitBefN(ctx: BefNContext): ast.SpecialNumberNode;
    visitSpecNum(ctx: SpecNumContext): ast.SpecialNumberNode;
    visitStringLiteral(ctx: StringLiteralContext): ast.StringLiteralNode;
    visitCharLiteral(ctx: CharLiteralContext): ast.CharLiteralNode;
    visitList(ctx: ListExprContext): ast.ListLiteralNode;
}
