import { AbstractParseTreeVisitor } from 'antlr4ng';
import { testVisitor } from './.antlr/testVisitor.js';
import * as ast from './testAst.js';
import { ProgContext } from "./.antlr/testParser.js";
import { ExprStatementContext } from "./.antlr/testParser.js";
import { EmptyLineStatementContext } from "./.antlr/testParser.js";
import { DefinitionStatementContext } from "./.antlr/testParser.js";
import { IfStatementContext } from "./.antlr/testParser.js";
import { ForStatementContext } from "./.antlr/testParser.js";
import { WhileStatementContext } from "./.antlr/testParser.js";
import { DoStatementContext } from "./.antlr/testParser.js";
import { ReturnStatementContext } from "./.antlr/testParser.js";
import { BreakStatementContext } from "./.antlr/testParser.js";
import { ContinueStatementContext } from "./.antlr/testParser.js";
import { StructStatementContext } from "./.antlr/testParser.js";
import { ModuleStatementContext } from "./.antlr/testParser.js";
import { PreproStatementContext } from "./.antlr/testParser.js";
import { PreChrContext } from "./.antlr/testParser.js";
import { PreChrPlusContext } from "./.antlr/testParser.js";
import { PDefContext } from "./.antlr/testParser.js";
import { PIfContext } from "./.antlr/testParser.js";
import { PIncContext } from "./.antlr/testParser.js";
import { DefContext } from "./.antlr/testParser.js";
import { IfContext } from "./.antlr/testParser.js";
import { ForContext } from "./.antlr/testParser.js";
import { WhileContext } from "./.antlr/testParser.js";
import { DoContext } from "./.antlr/testParser.js";
import { ReturnContext } from "./.antlr/testParser.js";
import { ContinueContext } from "./.antlr/testParser.js";
import { BreakContext } from "./.antlr/testParser.js";
import { StructContext } from "./.antlr/testParser.js";
import { FcallContext } from "./.antlr/testParser.js";
import { ModuleAssignContext } from "./.antlr/testParser.js";
import { ModuleFunctionContext } from "./.antlr/testParser.js";
import { ModuleStartContext } from "./.antlr/testParser.js";
import { ModuleEndContext } from "./.antlr/testParser.js";
import { MainContext } from "./.antlr/testParser.js";
import { NoAssignmentContext } from "./.antlr/testParser.js";
import { AssignContext } from "./.antlr/testParser.js";
import { StructAssignContext } from "./.antlr/testParser.js";
import { ListAssignContext } from "./.antlr/testParser.js";
import { TernaryContext } from "./.antlr/testParser.js";
import { QuoteContext } from "./.antlr/testParser.js";
import { QEnotContext } from "./.antlr/testParser.js";
import { QEorContext } from "./.antlr/testParser.js";
import { QEandContext } from "./.antlr/testParser.js";
import { QECompareContext } from "./.antlr/testParser.js";
import { OrContext } from "./.antlr/testParser.js";
import { AndContext } from "./.antlr/testParser.js";
import { CompareContext } from "./.antlr/testParser.js";
import { AddSubContext } from "./.antlr/testParser.js";
import { MulDivSurContext } from "./.antlr/testParser.js";
import { UnaryMinusContext } from "./.antlr/testParser.js";
import { NotExprContext } from "./.antlr/testParser.js";
import { PowExprContext } from "./.antlr/testParser.js";
import { PowExContext } from "./.antlr/testParser.js";
import { FactrialExprContext } from "./.antlr/testParser.js";
import { PreFixContext } from "./.antlr/testParser.js";
import { PostFixContext } from "./.antlr/testParser.js";
import { IndexAccessContext } from "./.antlr/testParser.js";
import { IndExprContext } from "./.antlr/testParser.js";
import { RealContext } from "./.antlr/testParser.js";
import { IdExprContext } from "./.antlr/testParser.js";
import { FCallExprContext } from "./.antlr/testParser.js";
import { ParenContext } from "./.antlr/testParser.js";
import { StringLiteralContext } from "./.antlr/testParser.js";
import { ListLiteralContext } from "./.antlr/testParser.js";
import { DpLiteralContext } from "./.antlr/testParser.js";
import { PreChrExprContext } from "./.antlr/testParser.js";
import { DpContext } from "./.antlr/testParser.js";
import { RatContext } from "./.antlr/testParser.js";
import { FloatContext } from "./.antlr/testParser.js";
import { HexNumContext } from "./.antlr/testParser.js";
import { BitNumContext } from "./.antlr/testParser.js";
import { RatNumContext } from "./.antlr/testParser.js";
import { DecNumContext } from "./.antlr/testParser.js";
import { ImaNumContext } from "./.antlr/testParser.js";
import { VIdContext } from "./.antlr/testParser.js";
import { BefContext } from "./.antlr/testParser.js";
import { BefNContext } from "./.antlr/testParser.js";
import { V2IdContext } from "./.antlr/testParser.js";
import { AtFuncContext } from "./.antlr/testParser.js";
import { ChFuncContext } from "./.antlr/testParser.js";
import { ListExprContext } from "./.antlr/testParser.js";
import { SentenceContext } from "./.antlr/testParser.js";
import { Sentence1Context } from "./.antlr/testParser.js";
import { ExprlistContext } from "./.antlr/testParser.js";
import { OptionPairContext } from "./.antlr/testParser.js";
import { QualifiedIdentifierContext } from "./.antlr/testParser.js";
export declare class AsirASTBuilder extends AbstractParseTreeVisitor<ast.ASTNode | undefined> implements testVisitor<ast.ASTNode | undefined> {
    private createIdentifierNode;
    private visitAndCheck;
    private visitBinaryOp;
    protected defaultResult(): ast.ASTNode | undefined;
    protected aggregateResult(aggregate: ast.ASTNode | undefined, nextResult: ast.ASTNode | undefined): ast.ASTNode | undefined;
    visitProg(ctx: ProgContext): ast.ProgramNode;
    visitExprStatement(ctx: ExprStatementContext): ast.ExpressionStatementNode;
    visitEmptyStatement(ctx: EmptyLineStatementContext): ast.EmptyStatementNode;
    visitDefinitionStatement(ctx: DefinitionStatementContext): ast.DefinitionStatementNode;
    visitIfStatement(ctx: IfStatementContext): ast.IfStatementNode;
    visitForStatement(ctx: ForStatementContext): ast.ForStatementNode;
    visitWhileStatement(ctx: WhileStatementContext): ast.WhileStatementNode;
    visitDoStatement(ctx: DoStatementContext): ast.DoWhileStatementNode;
    visitReturnStatement(ctx: ReturnStatementContext): ast.ReturnStatementNode;
    visitBreakStatement(ctx: BreakStatementContext): ast.BreakStatementNode;
    visitContinueStatement(ctx: ContinueStatementContext): ast.ContinueStatementNode;
    visitStructStatement(ctx: StructStatementContext): ast.StructStatementNode;
    visitModuleStatement(ctx: ModuleStatementContext): ast.ModuleStatementNode;
    visitPreproStatement(ctx: PreproStatementContext): ast.PreprocessorNode;
    visitPreChr(ctx: PreChrContext): ast.UnaryOperationNode;
    visitPreChrPlus(ctx: PreChrPlusContext): ast.BinaryOperationNode;
    visitPDef(ctx: PDefContext): ast.PreprocessorDefineNode;
    visitPInc(ctx: PIncContext): ast.PreprocessorIncludeNode;
    visitPIf(ctx: PIfContext): ast.PreprocessorIfNode;
    visitMain(ctx: MainContext): ast.ExpressionNode;
    visitNoAssignment(ctx: NoAssignmentContext): ast.ExpressionNode;
    visitAssign(ctx: AssignContext): ast.AssignmentExpressionNode;
    visitStructAssign(ctx: StructAssignContext): ast.StructMemberAssignmentNode;
    visitListAssign(ctx: ListAssignContext): ast.ListDestructuringAssignmentNode;
    visitTernary(ctx: TernaryContext): ast.ExpressionNode;
    visitQuote(ctx: QuoteContext): ast.UnaryOperationNode;
    visitQEnot(ctx: QEnotContext): ast.ExpressionNode;
    visitQEor(ctx: QEorContext): ast.ExpressionNode;
    visitQEand(ctx: QEandContext): ast.ExpressionNode;
    visitQECompare(ctx: QECompareContext): ast.ExpressionNode;
    visitOr(ctx: OrContext): ast.ExpressionNode;
    visitAnd(ctx: AndContext): ast.ExpressionNode;
    visitCompare(ctx: CompareContext): ast.ExpressionNode;
    visitAddSub(ctx: AddSubContext): ast.ExpressionNode;
    visitMulDivSur(ctx: MulDivSurContext): ast.ExpressionNode;
    visitUnaryMinus(ctx: UnaryMinusContext): ast.UnaryOperationNode;
    visitNotExpr(ctx: NotExprContext): ast.UnaryOperationNode;
    visitPowExpr(ctx: PowExprContext): ast.ExpressionNode;
    visitPower(ctx: PowExContext): ast.ExpressionNode;
    visitFactrialExpr(ctx: FactrialExprContext): ast.ExpressionNode;
    visitPreFix(ctx: PreFixContext): ast.UnaryOperationNode;
    visitPostFix(ctx: PostFixContext): ast.UnaryOperationNode;
    visitIndexAccess(ctx: IndexAccessContext): ast.ExpressionNode;
    visitIndExpr(ctx: IndExprContext): ast.IdentifierNode;
    visitReal(ctx: RealContext): ast.NumberLiteralNode;
    visitIdExpr(ctx: IdExprContext): ast.IdentifierNode;
    visitFCallExpr(ctx: FCallExprContext): ast.FunctionCallNode;
    visitParen(ctx: ParenContext): ast.ParenExpressionNode;
    visitStringLiteral(ctx: StringLiteralContext): ast.StringLiteralNode;
    visitListLiteral(ctx: ListLiteralContext): ast.ListLiteralNode;
    visitDpLiteral(ctx: DpLiteralContext): ast.DistributedPolynomialLiteralNode;
    visitPreChrExpr(ctx: PreChrExprContext): ast.ExpressionNode;
    visitHexNum(ctx: HexNumContext): ast.NumberLiteralNode;
    visitBitNum(ctx: BitNumContext): ast.NumberLiteralNode;
    visitRatNum(ctx: RatNumContext): ast.NumberLiteralNode;
    visitDecNum(ctx: DecNumContext): ast.NumberLiteralNode;
    visitImaNum(ctx: ImaNumContext): ast.NumberLiteralNode;
    visitRat(ctx: RatContext): ast.NumberLiteralNode;
    visitFloat(ctx: FloatContext): ast.NumberLiteralNode;
    visitVId(ctx: VIdContext): ast.IdentifierNode;
    visitV2Id(ctx: V2IdContext): ast.IdentifierNode;
    visitBef(ctx: BefContext): ast.IdentifierNode;
    visitBefN(ctx: BefNContext): ast.IdentifierNode;
    visitAtFunc(ctx: AtFuncContext): ast.IdentifierNode;
    visitChFunc(ctx: ChFuncContext): ast.IdentifierNode;
    visitListExpr(ctx: ListExprContext): ast.ListLiteralNode;
    visitDp(ctx: DpContext): ast.DistributedPolynomialLiteralNode;
    visitDef(ctx: DefContext): ast.DefinitionStatementNode;
    visitIf(ctx: IfContext): ast.IfStatementNode;
    visitFor(ctx: ForContext): ast.ForStatementNode;
    visitWhile(ctx: WhileContext): ast.WhileStatementNode;
    visitDo(ctx: DoContext): ast.DoWhileStatementNode;
    visitReturn(ctx: ReturnContext): ast.ReturnStatementNode;
    visitBreak(ctx: BreakContext): ast.BreakStatementNode;
    visitContinue(ctx: ContinueContext): ast.ContinueStatementNode;
    visitStrct(ctx: StructContext): ast.StructStatementNode;
    visitFcall(ctx: FcallContext): ast.FunctionCallNode;
    visitModuleAssign(ctx: ModuleAssignContext): ast.ModuleVariableDeclarationNode;
    visitModuleFunction(ctx: ModuleFunctionContext): ast.LocalFunctionDeclarationNode;
    visitModuleStart(ctx: ModuleStartContext): ast.ModuleDeclarationNode;
    visitModuleEnd(ctx: ModuleEndContext): ast.EndModuleNode;
    visitSentence(ctx: SentenceContext): ast.BlockNode;
    visitSentence1(ctx: Sentence1Context): ast.BlockNode;
    visitExprlist(ctx: ExprlistContext): ast.ExpressionListNode;
    visitOptionPair(ctx: OptionPairContext): ast.OptionPairNode;
    visitQualifiedIdentifier(ctx: QualifiedIdentifierContext): ast.QualifiedIdentifierNode;
}
